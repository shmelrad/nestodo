generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String      @unique
  passwordHash String
  workspaces   Workspace[]
  createdAt    DateTime    @default(now())
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  priority    TaskPriority?
  completed   Boolean       @default(false)
  position    Int           @default(0)
  duration    Int?          // Store in minutes
  attachments Attachment[]
  subtasks    Subtask[]
  taskList    TaskList      @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  taskListId  Int
  tags        WorkspaceTag[] @relation("TaskToTag")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Subtask {
  id        Int     @id @default(autoincrement())
  title     String
  completed Boolean @default(false)
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
}

model Attachment {
  id           Int    @id @default(autoincrement())
  originalFileName String
  fileName     String
  contentType  String
  size         Int
  task         Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       Int
}

model TaskList {
  id       Int    @id @default(autoincrement())
  title    String
  position Int    @default(0)
  tasks    Task[]
  board    Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId  Int
}

model Board {
  id          Int        @id @default(autoincrement())
  title       String
  taskLists   TaskList[]
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Workspace {
  id        Int           @id @default(autoincrement())
  title     String
  userId    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  boards    Board[]
  tags      WorkspaceTag[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model WorkspaceTag {
  id          Int       @id @default(autoincrement())
  name        String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
  tasks       Task[]    @relation("TaskToTag")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, name])
}
